66. Plus One

You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.

Increment the large integer by one and return the resulting array of digits.

 Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be [1,2,4].
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be [4,3,2,2].
Example 3:

Input: digits = [9]
Output: [1,0]
Explanation: The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be [1,0].

Solution:

class Solution(object):
    def plusOne(self, digits):
        """
        :type digits: List[int]
        :rtype: List[int]
        """
        a=''.join([str(ele) for ele in digits])
        n_a=int(a)
        n_a+=1
        n_a=str(n_a)
        new=list(n_a)
        new_=[int(i) for i in new]
        return new_

Optimal Solution:

def plus_one(digits):
    # Start from the rightmost digit
    for i in range(len(digits) - 1, -1, -1):
        # Increment the current digit by 1
        digits[i] += 1

        # If there's no carry, we're done
        if digits[i] < 10:
            return digits

        # If there's a carry, set the current digit to 0 and continue with the next digit
        digits[i] = 0

    # If there's still a carry after the loop, add a new digit with value 1 at the beginning
    return [1] + digits
