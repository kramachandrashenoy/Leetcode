35. Search Insert Position

Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4

Solution:

import bisect
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        if target in nums:
            return nums.index(target)
        else:
            bisect.insort(nums,target)
            return nums.index(target)


Optimal solution:

def search_insert(nums, target):
    # Initialize pointers for binary search
    low, high = 0, len(nums) - 1

    # Binary search loop
    while low <= high:
        mid = (low + high) // 2

        # Check if target is equal to the element at mid
        if nums[mid] == target:
            return mid
        # If target is greater, narrow the search to the right half
        elif nums[mid] < target:
            low = mid + 1
        # If target is smaller, narrow the search to the left half
        else:
            high = mid - 1

    # If the loop exits, target is not in the array
    # Return the index where it would be inserted
    
    return low


